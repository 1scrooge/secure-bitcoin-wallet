/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package grep11protos;

import "manager.proto";
import "server.proto";
import "discovery.proto";
import "keystore.proto";

service Grep11Manager {
	rpc Load(LoadInfo) returns (LoadStatus) {}
}

service Grep11Server {
// See https://www-03.ibm.com/security/cryptocards/pciecc/pdf/ep11-structure.pdf for
// further documentation

/******* RANDOM ***********/
// CK_RV m_GenerateRandom   (CK_BYTE_PTR rnd, CK_ULONG len,     target_t target) ;
	rpc GenerateRandom(GenerateRandomInfo) returns (GenerateRandomStatus) {}
	
// /**/
// /* note: external seeding not supported */
// CK_RV m_SeedRandom (CK_BYTE_PTR pSeed,   CK_ULONG ulSeedLen,
//                        target_t target) ;


/******* DIGEST ***********/
// CK_RV m_DigestInit     (unsigned char *state,     size_t *len,
//                const CK_MECHANISM_PTR pmech,
//                              target_t target) ;
	rpc DigestInit(DigestInitInfo) returns (DigestState) {}
	
// CK_RV m_Digest (const unsigned char *state,       size_t slen,
//                         CK_BYTE_PTR data,       CK_ULONG len,
//                         CK_BYTE_PTR digest, CK_ULONG_PTR dglen,
//                            target_t target) ;
	rpc Digest(DigestData) returns (DigestOut) {}
	
// CK_RV m_DigestUpdate (unsigned char *state,       size_t slen,
//                         CK_BYTE_PTR data,       CK_ULONG dlen,
//                            target_t target) ;
	rpc DigestUpdate(DigestData) returns (DigestState) {}
	
// CK_RV m_DigestKey    (unsigned char *state,       size_t slen,
//                 const unsigned char *key,         size_t klen,
//                            target_t target) ;
	rpc DigestKey(DigestKeyInfo) returns (DigestState) {}
	
// CK_RV m_DigestFinal  (const unsigned char *state,       size_t slen,
//                               CK_BYTE_PTR digest, CK_ULONG_PTR dlen,
//                                  target_t target) ;
	rpc DigestFinal(DigestData) returns (DigestOut) {}
	
// CK_RV m_DigestSingle (CK_MECHANISM_PTR pmech,
//                            CK_BYTE_PTR data,       CK_ULONG len,
//                            CK_BYTE_PTR digest, CK_ULONG_PTR dlen,
//                               target_t target) ;
	rpc DigestSingle(DigestSingleInfo) returns (DigestOut) {}

/******* CIPHER ***********/
// CK_RV m_EncryptInit        (unsigned char *state, size_t *slen,
//                          CK_MECHANISM_PTR pmech,
//                       const unsigned char *key,   size_t klen,
//                                  target_t target) ;
	rpc EncryptInit(CipherInitInfo) returns (CipherState) {}
	
// CK_RV m_DecryptInit        (unsigned char *state, size_t *slen,
//                          CK_MECHANISM_PTR pmech,
//                       const unsigned char *key,   size_t klen,
//                                  target_t target) ;
	rpc DecryptInit(CipherInitInfo) returns (CipherState) {}
	
// CK_RV m_EncryptUpdate      (unsigned char *state,       size_t slen,
//                               CK_BYTE_PTR plain,      CK_ULONG plen,
//                               CK_BYTE_PTR cipher, CK_ULONG_PTR clen,
//                                  target_t target) ;
	rpc EncryptUpdate(CipherData) returns (CipherState) {}
	
// CK_RV m_DecryptUpdate      (unsigned char *state,       size_t slen,
//                               CK_BYTE_PTR cipher,     CK_ULONG clen,
//                               CK_BYTE_PTR plain,  CK_ULONG_PTR plen,
//                                  target_t target) ;
	rpc DecryptUpdate(CipherData) returns (CipherState) {}
	
// /* one-pass en/decrypt with key blob */
// CK_RV m_Encrypt       (const unsigned char *state,       size_t slen,
//                                CK_BYTE_PTR plain,      CK_ULONG plen,
//                                CK_BYTE_PTR cipher, CK_ULONG_PTR clen,
//                                   target_t target) ;
	rpc Encrypt(CipherData) returns (CipherState) {}

// CK_RV m_Decrypt       (const unsigned char *state,       size_t slen,
//                                CK_BYTE_PTR cipher,     CK_ULONG clen,
//                                CK_BYTE_PTR plain,  CK_ULONG_PTR plen,
//                                   target_t target) ;
	rpc Decrypt(CipherData) returns (CipherState) {}

// CK_RV m_EncryptFinal  (const unsigned char *state,       size_t slen,
//                                CK_BYTE_PTR output, CK_ULONG_PTR len,
//                                   target_t target) ;
	rpc EncryptFinal(CipherData) returns (CipherState) {}
// CK_RV m_DecryptFinal  (const unsigned char *state,       size_t slen,
//                                CK_BYTE_PTR output, CK_ULONG_PTR len,
//                                   target_t target) ;
	rpc DecryptFinal(CipherData) returns (CipherState) {}
	
// /* en/decrypt directly with key blob */
// CK_RV m_EncryptSingle (const unsigned char *key,         size_t klen,
//                           CK_MECHANISM_PTR mech,
//                                CK_BYTE_PTR plain,      CK_ULONG plen,
//                                CK_BYTE_PTR cipher, CK_ULONG_PTR clen,
//                                   target_t target) ;
	rpc EncryptSingle(CipherDataSingle) returns (CipherState) {}
	
// CK_RV m_DecryptSingle (const unsigned char *key,         size_t klen,
//                           CK_MECHANISM_PTR mech,
//                                CK_BYTE_PTR cipher,     CK_ULONG clen,
//                                CK_BYTE_PTR plain,  CK_ULONG_PTR plen,
//                                   target_t target) ;
	rpc DecryptSingle(CipherDataSingle) returns (CipherState) {}
	
// #if defined(SYS_EMV)
// /**/
// /* de+encrypt in one pass, without exposing cleartext */
// CK_RV m_ReencryptSingle (const unsigned char *dkey,     size_t dklen,
//                          const unsigned char *ekey,     size_t eklen,
//                          CK_MECHANISM_PTR pdecrmech,
//                          CK_MECHANISM_PTR pencrmech,
//                               CK_BYTE_PTR in,       CK_ULONG ilen,
//                               CK_BYTE_PTR out,  CK_ULONG_PTR olen,
//                                  target_t target) ;
// #endif

/******* SIGNATURE ***********/
// CK_RV m_SignInit     (unsigned char *state,     size_t *slen,
//                    CK_MECHANISM_PTR alg,
//                 const unsigned char *key,       size_t klen,
//                            target_t target) ;
	rpc SignInit(SignatureInitInfo) returns (SignatureState) {}
	
// CK_RV m_VerifyInit   (unsigned char *state,     size_t *slen,
//                    CK_MECHANISM_PTR alg,
//                 const unsigned char *key,       size_t klen,
//                            target_t target) ;
	rpc VerifyInit(VerifyInitInfo) returns (SignatureState) {}
	
// CK_RV m_SignUpdate   (unsigned char *state,     size_t slen,
//                         CK_BYTE_PTR data,     CK_ULONG dlen,
//                            target_t target) ;
	rpc SignUpdate(SignatureData) returns (SignatureState) {}
	
// CK_RV m_VerifyUpdate (unsigned char *state,     size_t slen,
//                         CK_BYTE_PTR data,     CK_ULONG dlen,
//                            target_t target) ;
	rpc VerifyUpdate(SignatureData) returns (SignatureState) {}
	
// CK_RV m_SignFinal    (const unsigned char *state,      size_t stlen,
//                               CK_BYTE_PTR sig,   CK_ULONG_PTR siglen,
//                                  target_t target) ;
	rpc SignFinal(SignFinalInfo) returns (Signature) {}
	
// CK_RV m_VerifyFinal  (const unsigned char *state,      size_t stlen,
//                               CK_BYTE_PTR sig,       CK_ULONG siglen,
//                                  target_t target) ;
	rpc VerifyFinal(VerifyFinalInfo) returns (VerifyStatus) {}
	
// CK_RV m_Sign   (const unsigned char *state,     size_t stlen,
//                         CK_BYTE_PTR data,     CK_ULONG dlen,
//                         CK_BYTE_PTR sig,  CK_ULONG_PTR siglen,
//                            target_t target) ;
	rpc Sign(SignatureData) returns (Signature) {}
	
// CK_RV m_Verify (const unsigned char *state,     size_t stlen,
//                         CK_BYTE_PTR data,     CK_ULONG dlen,
//                         CK_BYTE_PTR sig,      CK_ULONG siglen,
//                            target_t target) ;
	rpc Verify(VerifyIn) returns (VerifyStatus) {}

// CK_RV m_SignSingle   (const unsigned char *key,      size_t klen,
//                          CK_MECHANISM_PTR pmech,
//                               CK_BYTE_PTR data,    CK_ULONG dlen,
//                               CK_BYTE_PTR sig, CK_ULONG_PTR slen,
//                                  target_t target) ;
	rpc SignSingle(SignSingleInfo) returns (Signature) {}
	
// CK_RV m_VerifySingle (const unsigned char *key,      size_t klen,
//                          CK_MECHANISM_PTR pmech,
//                               CK_BYTE_PTR data,    CK_ULONG dlen,
//                               CK_BYTE_PTR sig,     CK_ULONG slen,
//                                  target_t target) ;
	rpc VerifySingle(VerifySingleInfo) returns (VerifyStatus) {}

/******* KEY Operations ***********/
// CK_RV m_GenerateKey (CK_MECHANISM_PTR pmech,
//                      CK_ATTRIBUTE_PTR ptempl, CK_ULONG templcount,
//                   const unsigned char *pin,     size_t pinlen,
//                         unsigned char *key,     size_t *klen,
//                         unsigned char *csum,    size_t *clen,
//                              target_t target) ;
	rpc GenerateKey(GenerateKeyInfo) returns (GenerateKeyStatus) {}

// CK_RV m_GenerateKeyPair (CK_MECHANISM_PTR pmech,
//                          CK_ATTRIBUTE_PTR ppublic,  CK_ULONG pubattrs,
//                          CK_ATTRIBUTE_PTR pprivate, CK_ULONG prvattrs,
//                       const unsigned char *pin,       size_t pinlen,
//                             unsigned char *key,       size_t *klen,
//                             unsigned char *pubkey,    size_t *pklen,
//                                  target_t target) ;
	rpc GenerateKeyPair(GeneratePairInfo) returns (GeneratePairStatus) {}
		
// /* mackey is NULL for PKCS#11 formats, not for authenticated ones */
// CK_RV m_WrapKey (const unsigned char *key,          size_t keylen,
//                  const unsigned char *kek,          size_t keklen,
//                  const unsigned char *mackey,       size_t mklen,
//               const CK_MECHANISM_PTR pmech,
//                          CK_BYTE_PTR wrapped, CK_ULONG_PTR wlen,
//                             target_t target) ;
	rpc WrapKey(WrapKeyInfo) returns (WrapKeyStatus) {}
	
// /* mackey is NULL for PKCS#11 formats, not for authenticated ones */
// CK_RV m_UnwrapKey (const   CK_BYTE_PTR wrapped,  CK_ULONG wlen,
//                    const unsigned char *kek,       size_t keklen,
//                    const unsigned char *mackey,    size_t mklen,
//                    const unsigned char *pin,       size_t pinlen,
//                 const CK_MECHANISM_PTR uwmech,
//                 const CK_ATTRIBUTE_PTR ptempl,   CK_ULONG pcount,
//                          unsigned char *unwrapped, size_t *uwlen,
//                            CK_BYTE_PTR csum,     CK_ULONG *cslen,
//                               target_t target) ;
// 
	rpc UnwrapKey(UnwrapKeyInfo) returns (UnwrapKeyStatus) {}
	
// CK_RV m_DeriveKey ( CK_MECHANISM_PTR pderivemech,
//                     CK_ATTRIBUTE_PTR ptempl, CK_ULONG templcount,
//                  const unsigned char *basekey, size_t bklen,
//                  const unsigned char *data,    size_t dlen,
//                  const unsigned char *pin,     size_t pinlen,
//                        unsigned char *newkey,  size_t *nklen,
//                        unsigned char *csum,    size_t *cslen,
//                        target_t target) ;
// 
	rpc DeriveKey(DeriveKeyInfo) returns (DeriveKeyStatus) {}

/******* Information ***********/
// CK_RV m_GetMechanismList (CK_SLOT_ID slot,
//                CK_MECHANISM_TYPE_PTR mechs,
//                         CK_ULONG_PTR count,
//                             target_t target) ;
	rpc GetMechanismList(GetMechanismListInfo) returns (GetMechanismListStatus) {}
	
// CK_RV m_GetMechanismInfo (CK_SLOT_ID slot,
//                    CK_MECHANISM_TYPE mech,
//                CK_MECHANISM_INFO_PTR pmechinfo,
//                             target_t target) ;
	rpc GetMechanismInfo(GetMechanismInfoInfo) returns (GetMechanismInfoStatus) {}
	
// CK_RV m_GetAttributeValue (const unsigned char *obj,        size_t olen,
//                               CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount,
//                                       target_t target) ;
	rpc GetAttributeValue(GetAttributeValueInfo) returns (GetAttributeValueStatus) {}
	
// CK_RV m_SetAttributeValue       (unsigned char *obj,        size_t olen,
//                               CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount,
//                                       target_t target) ;
	rpc SetAttributeValue(SetAttributeValueInfo) returns (SetAttributeValueStatus) {}
	 
// CK_RV m_Login ( CK_UTF8CHAR_PTR pin,      CK_ULONG pinlen,
//             const unsigned char *nonce,     size_t nlen,
//                   unsigned char *pinblob,   size_t *pinbloblen,
//                        target_t target) ;
// CK_RV m_Logout ( const unsigned char *pin, size_t len,     target_t target) ;
// 
// CK_RV m_admin (unsigned char *response1, size_t *r1len,
//                unsigned char *response2, size_t *r2len,
//          const unsigned char *cmd,       size_t clen,
//          const unsigned char *sigs,      size_t slen,
//                          target_t target) ;
// 
// CK_RV m_get_xcp_info (CK_VOID_PTR pinfo, CK_ULONG_PTR infbytes,
//                      unsigned int query,
//                      unsigned int subquery,
//                         target_t target) ;

// int m_probe_target(target_t target) ;


// CK_RV m_wire (unsigned char *rsp, size_t *rsplen, CK_RV *irv,
//         const unsigned char *req, size_t reqlen,
//                unsigned int flags,
//                    target_t target) ;

}

service KeyStore {
	rpc GetObjects(SearchInfo) returns (ObjectList) {}
	rpc DeleteObject(ObjectList) returns (DeleteStatus) {}
	rpc StoreObject(ObjectList) returns (StoreStatus) {}

	rpc InitStore(LoginInfo) returns (AuthStatus) {}
	rpc ChangeAuth(LoginInfo) returns (ChangeStatus) {}
	rpc OpenStore(LoginInfo) returns (AuthStatus) {}
	rpc LogOut(LogOutInfo) returns (LogOutStatus) {}

	rpc ServerInfo(ServerInfoInfo) returns (InfoStatus) {}
}

service Grep11Discovery {

}

// service LoadBalancer from "google.golang.org/grpc/grpclb/grpc_lb_v1/service"

/*** DEPRECATED ***/
service Grep11 {
	rpc GenerateECKey(GenerateInfo) returns (GenerateStatus) {}
	rpc SignP11ECDSA(SignInfo) returns (SignStatus) {}
	rpc VerifyP11ECDSA(VerifyInfo) returns (VerifyStatus) {}
}

// Genereted code from messages:
// awk -F'[ \t\(\)]*' '/rpc /{print "echo \" *\"\necho \" * GRPC Input and Output message fields:\""; print "sed -n \"/message *" $4 " *{/,/}/p\" protos/server.proto | sed -e \"s/^/ *    /\""; print "sed -n \"/message *" $6 " *{/,/}/p\" protos/server.proto | sed -e \"s/^/ *    /\""; print "echo \" */\"\necho \"func (s *grep11Server) " $3 "(c context.Context, " tolower(substr($4,1,1)) substr($4,2) " *pb." $4 ") (*pb." $6 ", error) {\"\necho -e \"\\treturn nil, nil\"\necho \"}\"\necho \"\""} /CK_RV/{ print "echo -e \"/*\n * ======== " $3 "========\n *\n * EP11 Signature:\""}  !/rpc /{print "echo \"" $0 "\" | sed -e \"sx//x *    x\""}' protos/grep11.proto  > run.sh && bash run.sh